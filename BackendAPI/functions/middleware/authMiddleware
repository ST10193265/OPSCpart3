const jwt = require('jsonwebtoken');
const admin = require('../config/db.js');

// Middleware to protect routes
const protect = async (req, res, next) => {
    let token;

    if (req.headers.authorization) {
        try {

            token = req.headers.authorization.split(' ')[1];

            // Use the Authorization header directly without the "Bearer" prefix
            token = req.headers.authorization; // This will be just the token value

            
            // Verify token
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const { id, role } = decoded; // Extract id and role from token
            console.log("Decoded token ID:", id, "Role:", role);

            req.userId = decoded.id; // Attach user ID to request
           // console.log(decoded.id)
            console.log(req.userId)

            // Determine collection path based on role
            const collectionPath = role === 'dentists' ? 'dentists' : 'clients';
            const userRef = admin.database().ref(`${collectionPath}/${id}`);

            const userSnapshot = await userRef.once('value');
            if (!userSnapshot.exists()) {
                console.error("User not found for ID:", id);
                return res.status(401).json({ message: 'Not authorized, user not found' });
            }

            req.user = { id, role, ...userSnapshot.val() }; // Attach user data and role
            delete req.user.password;

            next();
        } catch (error) {
            console.error("Not authorized, token failed:", error);
            res.status(401).json({ message: 'Not authorized, token failed' });
        }
    } else {
        res.status(401).json({ message: 'Not authorized, no token' });
    }
};

module.exports = {
    protect,

};
